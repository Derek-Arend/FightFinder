# # import asyncio
# # import websockets
# # import json
# #
# # async def get_kills(*, insert_function):
# #     gdax_ws_address = "wss://zkillboard.com/websocket/"
# #     async with websockets.connect(gdax_ws_address) as websocket:
# #         await websocket.send(subscribe)
# #         # while True:
# #         #     message_str = await asyncio.wait_for(websocket.recv(), WAIT_TIMEOUT)
# #         #     message = json.loads(message_str)
import asyncio
import websockets
import json

async def test():
    async with websockets.connect('wss://zkillboard.com/websocket/') as websocket:
        await websocket.send(json.dumps({"action": "sub", "channel": "killstream"}))
        response = await websocket.recv()
        print(response)

asyncio.get_event_loop().run_until_complete(test())
print(test)

# import asyncio
# import websockets
#
# async def test():
#     async with client.ws_connect(self.url_websocket(), heartbeat=10) as ws:
#         lg.info('ZK WebSocket connection established.')
#         await ws.send_json(data={"action": "sub", "channel": "killstream"})
#
# asyncio.get_event_loop().run_until_complete(test())
# print(test)
# import asyncio
# import websockets
#
# async def hello(websocket, path):
#     name = await websocket.recv()
#     print(f"< {name}")
#
#     greeting = f"Hello {name}!"
#
#     await websocket.send(greeting)
#     print(f"> {greeting}")
#
# start_server = websockets.serve(hello, "localhost", 8765)
#
# asyncio.get_event_loop().run_until_complete(start_server)
# asyncio.get_event_loop().run_forever()
